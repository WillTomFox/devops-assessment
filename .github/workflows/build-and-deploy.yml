# Workflow for Python build and test, docker build and push and Terraform deployment

name: Python Build, Docker Build, Terraform Deploy
on:
  workflow_dispatch:
  push:
    branches: [ '*' ]
  pull_request:
    types: [opened, synchronize, reopened, closed]
jobs:
  python-build:
    name: Python Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with ruff
        run: |
          # stop the build if there are Python syntax errors or undefined names
          ruff --format=github --select=E9,F63,F7,F82 --target-version=py37 .
          # default set of ruff rules with GitHub Annotations
          ruff --format=github --target-version=py37 .
      - name: Test with pytest
        run: |
          pytest
  docker-build:
    name: Docker Build and Push
    needs: python-build
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: devops_assessment
        IMAGE_TAG: latest
      run: |
        docker build -t devops_assessment .
        docker tag devops_assessment:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  terraform-plan:
    name: Terraform Plan and Deploy
    needs: docker-build
    runs-on: ubuntu-latest
    env:
        TF_VAR_region: "eu-west-2"
        TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
        TFSTATE_AWS_ACCESS_KEY_ID: ${{ secrets.TFSTATE_AWS_ACCESS_KEY_ID }}
        TFSTATE_AWS_SECRET_ACCESS_KEY: ${{ secrets.TFSTATE_AWS_SECRET_ACCESS_KEY }}
        TFSTATE_BUCKET: "travelperk-devops-assessment"
        TFSTATE_KEY: "terraform.tfstate"
        TFSTATE_REGION: "eu-west-2"
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.5.4
    - name: Terraform Init
      run: terraform init -backend-config="bucket=$TFSTATE_BUCKET" -backend-config="key=$TFSTATE_KEY" -backend-config="region=$TFSTATE_REGION" -backend-config="access_key=${{ secrets.TFSTATE_AWS_ACCESS_KEY_ID }}" -backend-config="secret_key=${{ secrets.TFSTATE_AWS_SECRET_ACCESS_KEY }}"
      working-directory: ./terraform
    - name: Terraform Plan
      run: terraform plan -out=tfplan
      working-directory: ./terraform
    - name: Terraform Apply
      # Only apply terraform if MR is merged to main
      if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch' }}
      run: terraform apply tfplan
      working-directory: ./terraform
